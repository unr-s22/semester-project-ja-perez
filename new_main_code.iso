// Stepper Motor Library - Controls 
#include <Stepper.h>
// LCD Library - Display Temp, Humidity, Date/Time of Start
#include <LiquidCrystal.h>
// Clock Library - Logs Date and Time
#include <Wire.h>
#include <TimeLib.h>
#include <DS1307RTC.h>
// Temp/Humidity Sensor Library
#include <Adafruit_Sensor.h>
#include "DHT.h"
#include <DHT_U.h>

#define PCIE0 0
#define PCIE1 1
#define PCIE2 2
#define TEMP_THRESHOLD 0
#define W_L_THRESHOLD 1

unsigned int disable = 1;
//unsigned int set_stop = 0;
unsigned int TEMP = 15;
unsigned int W_LEVEL = 2;
int fan_state = 0;

// Stepper
const int stepsPerRevolution = 200;  // change this to fit the number of steps per revolution
Stepper myStepper(stepsPerRevolution, 4, 5, 6, 7);
int vent_state = 0;

// LCD
const int rs = 8 , en = 9, d4 = 10, d5 = 11, d6 = 12, d7 = 13;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// Water/Temp Sensors
#define waterSensorP 2
#define waterSensorPin 0
#define DHT_PIN 3
#define DHTTYPE DHT11

DHT dhtC (DHT_PIN, DHTTYPE);

// Defining ADC Registers
  volatile unsigned char *myADMUX = (unsigned char *)  0x7C;
  volatile unsigned char *myADCSRB = (unsigned char *) 0x7B;
  volatile unsigned char *myADCSRA = (unsigned char *) 0x7A;
  volatile unsigned int *myADCL = (unsigned int *)  0x78;

// Time
  const char *monthName[12] = {
    "Jan", "Feb", "Mar", "Apr", "May", "Jun",
    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
  };
  tmElements_t tm;
  bool parse=false;
  bool config=false;

// States: [0] - [Disable, Idle, Error, Running]
  const char* state_label[4] = {"Disable","Idle","Error","Running"};
  int states[4] = {0, 0, 0, 0};

// Define Pin Change Interrupt Registers
  volatile unsigned char *myPCICR = (unsigned char*) 0x68;
  volatile unsigned char *myPCMSK0 = (unsigned char*) 0x6B;
  volatile unsigned char *myPCMSK1 = (unsigned char*) 0x6C;
  volatile unsigned char *myPCMSK2 = (unsigned char*) 0x6D;

// Define External Interrupt Registers
  volatile unsigned char *myEICRA = (unsigned char*) 0x69;  
  volatile unsigned char *myEICRB = (unsigned char*) 0x6A;
  volatile unsigned char *myEIMSK = (unsigned char*) 0x3D;

// Define Port B Registers
//  volatile unsigned char* port_b = (unsigned char*) 0x25;
//  volatile unsigned char* ddr_b  = (unsigned char*) 0x24;
//  volatile unsigned char* pin_b  = (unsigned char*) 0x23;

// Define Port E Registers
  volatile unsigned char* port_e = (unsigned char*) 0x2E;
  volatile unsigned char* ddr_e  = (unsigned char*) 0x2D;
  volatile unsigned char* pin_e  = (unsigned char*) 0x2C;

// Define Port G Registers
  volatile unsigned char* port_g = (unsigned char*) 0x34;
  volatile unsigned char* ddr_g  = (unsigned char*) 0x33;
  volatile unsigned char* pin_g  = (unsigned char*) 0x32;

// Define Port H Registers
  volatile unsigned char* port_h = (unsigned char*) 0x102;
  volatile unsigned char* ddr_h  = (unsigned char*) 0x101;
  volatile unsigned char* pin_h  = (unsigned char*) 0x100;

// Define Port K Registers
  volatile unsigned char* port_k = (unsigned char*) 0x108;
  volatile unsigned char* ddr_k  = (unsigned char*) 0x107;
  volatile unsigned char* pin_k  = (unsigned char*) 0x106;
 
// Define Port L Registers
  volatile unsigned char* port_L = (unsigned char*) 0x10B;
  volatile unsigned char* ddr_L  = (unsigned char*) 0x10A;
  volatile unsigned char* pin_L  = (unsigned char*) 0x109;

void setup() {
  // Serial Initialization
  Serial.begin(9600);
  // Clock Setup
  configure_RTC();
  states[0] = disable;
  update_state(0);
  // Set PORTS L0, L2, L4, L6 as output
  // LED PINS - 0:DISABLE, 1:IDLE, 2:ERROR, 3:RUNNING
  *ddr_L = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
  // Enable External Interrupts
    cli();
    // vent interrupt
    *myPCMSK2 = (1 << 7);
    *myPCICR = 1 << PCIE2;
    *ddr_k &= 0x7F;
    // disable/reset interrupt
    *myEIMSK = 0x0C;
    *myEICRA = 0xA0;
  sei();
  // Stepper setup
  myStepper.setSpeed(60);
  // Fan setup
  *ddr_g = 1 << 0;
  // Water/Temp Setup
  *ddr_e = 1 << waterSensorP; // Set D1
  write_pin(port_e, waterSensorP, 0);

  // ADC initialization
  adc_init();

  // LCD
  lcd.begin(16,2);

  // Water level Pin
  
}

void loop() {
  if (vent_state == 1 && states[0] == 0) 
  {
    myStepper.step(stepsPerRevolution);
  }
  if (states[0] == 0)
  {
    // Calculate TEMP and W_LEVEL
    TEMP = tempValue();
    W_LEVEL = waterLevel();
    // Display Temp and Water level values
    update_lcd(TEMP, W_LEVEL);
    
    // Check temperature
    if (TEMP > TEMP_THRESHOLD)
    {
      states[3] = 1;
      update_state(3);
      running_mode(TEMP, W_LEVEL);
    }
    // Check water level
    else if (W_LEVEL <= W_L_THRESHOLD)
    {   
      error_mode(W_LEVEL);
      states[0] = 1;
      update_state(0);
    } 
  }
  else 
  {
  lcd.clear();
  }
}

void running_mode(int temp, int w_level)
{
  if (temp > TEMP_THRESHOLD)
  {
    // turn fan on
    toggle_fan(1);
    while (temp > TEMP_THRESHOLD) 
    {
      // update temp /////////////////////////////////////////////////
      temp = tempValue();
      w_level = waterLevel();
      if (w_level < W_L_THRESHOLD)
      {
        toggle_fan(0);
        error_mode(w_level);
        states[0] = 1;
        update_state(0);
        return;
      }
    }
  }
  // turn fan off
  toggle_fan(0);
  states[1] = 1;
  update_state(1);
}

void error_mode(int w_level)
{
  toggle_fan(0);
  states[2] = 1;
  update_state(2);
  if (w_level <= W_L_THRESHOLD) 
  {
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Water level is");
  delay(200);
  lcd.setCursor(0,1);
  lcd.print("too low");
  delay(200);
  }
  else
  {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Error");
    delay(200);
  }
  delay(500);
  lcd.clear();
}
/*//////////////////////////////////////////////////////////////
INTERRUPT FUNCTIONS
//////////////////////////////////////////////////////////////*/
// Start/Stop interrupt
ISR (INT2_vect)
{
  disable = !(states[0]);
  states[0] = disable;
  update_state(!disable);
}
// Reset interrupt 
ISR (INT3_vect)
{
  W_LEVEL = waterLevel();
  if (W_LEVEL > W_L_THRESHOLD)
  {
    error_mode(W_LEVEL);
    states[1] = 1;
    update_state(1);
  }
  else
  {
      error_mode(W_LEVEL);
      states[0] = 1;
      update_state(0);
  }
}
// Vent button interrupt
ISR (PCINT2_vect)
{
  vent_state = !vent_state;
}
/*//////////////////////////////////////////////////////////////
OUTPUT FUNCTIONS
//////////////////////////////////////////////////////////////*/
void update_state(int index)
{
    // Set current state LED to high
    for (int i = 0; i < 4; i++)
    {
      if (i == index)
      {
        print_state_change(i);
        states[i] = 1;
      }
      else
      {
        states[i] = 0;
      }
      write_pin(port_L, i, states[i]);
    }
    
    if (index == 0)
    {
      lcd.clear();  
      // turn fan off
    } else if (index == 2)
    {
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("ERROR");
      delay(200);
    }
}
void print_state_change(unsigned int index) 
{
        Serial.print(" Transistion to state:");
        Serial.println(state_label[index]);
         while(!Serial);
         delay(200);
         if (parse&&config)
         {
            Serial.print(__TIME__);
            Serial.print(", Date=");
            Serial.println(__DATE__);
         }
}
void update_lcd(int curr_temp, int curr_w_l)
{
    lcd.setCursor(0,0);
    lcd.print("TEMP: ");
    delay(200);
    lcd.setCursor(6, 0);
    lcd.print(curr_temp);
    delay(200);
    lcd.setCursor(0,1);
    lcd.print("WATER LVL: ");
    delay(200);
    lcd.setCursor(11, 1);
    lcd.print(curr_w_l);
}

void write_pin(volatile unsigned char* pin_x, unsigned int pin_num, unsigned int state)
{
  if(state == 0)
  {
    *pin_x &= ~(0x01 << pin_num);
  }
  else
  {
    *pin_x |= 0x01 << pin_num;
  }
}

/*//////////////////////////////////////////////////////////////
RTC FUNCTIONS
//////////////////////////////////////////////////////////////*/
void configure_RTC()
{
  // get the date and time the compiler was run
  if (getDate(__DATE__) && getTime(__TIME__)) {
    parse = true;
    // and configure the RTC with this info
    if (RTC.write(tm)) {
      config = true;
    }
  } 
}
bool getTime(const char *str)
{
  int Hour, Min, Sec;

  if (sscanf(str, "%d:%d:%d", &Hour, &Min, &Sec) != 3) return false;
  tm.Hour = Hour;
  tm.Minute = Min + 4;
  tm.Second = Sec;
  return true;
}
bool getDate(const char *str)
{
  char Month[12];
  int Day, Year;
  uint8_t monthIndex;

  if (sscanf(str, "%s %d %d", Month, &Day, &Year) != 3) return false;
  for (monthIndex = 0; monthIndex < 12; monthIndex++) {
    if (strcmp(Month, monthName[monthIndex]) == 0) break;
  }
  if (monthIndex >= 12) return false;
  tm.Day = Day;
  tm.Month = monthIndex + 1;
  tm.Year = CalendarYrToTm(Year);
  return true;
}

/*//////////////////////////////////////////////////////////////
WATER & TEMP FUNCTIONS
//////////////////////////////////////////////////////////////*/

int humidityValue (){
    int humidity = dhtC.readHumidity();
    return humidity;
}

int tempValue (){
    int temperature = dhtC.readTemperature();
    return temperature;
}

int waterLevel () {
  
  int v = adc_read(waterSensorPin);
  return v;
}

void toggle_fan(int fan_state)
{
  write_pin(port_g, 0, fan_state);
}
/*//////////////////////////////////////////////////////////////
ANALOG TO DIGITAL CONVERSION FUNCTIONS
//////////////////////////////////////////////////////////////*/
void adc_init()
{
  *myADCSRA = 0x80; // Turns ADC on and sets clock prescaler to (111)2 -> (128)10
  *myADCSRB &= 0xF0; // Sets ADC0: MUX[0:5] = 000000
  *myADMUX = 0x40; // Sets Vref to AVCC, right justified, ADC output channel = 0 (0000)
}

unsigned int adc_read(unsigned char adc_channel)
{ 
  *myADMUX &= 0xE0; // clears channel selection
  *myADCSRB &= 0xF7; // clears mux 5 channel selection

  if (adc_channel > 7)
  {
    adc_channel -= 8;
    *myADCSRB |= 0x08; // Set mux 5 to 1: (MUX 5, MUX 3, MUX 2, MUX 1) -> 1XXX
  }
  *myADMUX += adc_channel;
  *myADCSRA |= 0x40;  // Starts conversion
  while ((*myADCSRA & 0x40) != 0); // See if conversion is done
  return *myADCL;
}
